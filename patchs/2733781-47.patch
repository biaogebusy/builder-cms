diff --git a/src/EntityPrintPHPWord.php b/src/EntityPrintPHPWord.php
new file mode 100644
index 0000000..d93060b
--- /dev/null
+++ b/src/EntityPrintPHPWord.php
@@ -0,0 +1,31 @@
+<?php
+
+namespace Drupal\entity_print;
+
+use PhpOffice\PhpWord\IOFactory;
+use PhpOffice\PhpWord\PhpWord;
+
+/**
+ * Extended PhpWord object for Entity print module.
+ */
+class EntityPrintPHPWord extends PhpWord
+{
+
+  /**
+   * Returns printed raw printed content.
+   *
+   * @param string $format
+   *   Exported format.
+   *
+   * @return string
+   *  Printed content.
+   */
+  public function getBlob($format = 'Word2007')
+  {
+    $writer = IOFactory::createWriter($this, $format);
+    ob_start();
+    $writer->save('php://output');
+    return ob_get_clean();
+  }
+
+}
diff --git a/src/Plugin/EntityPrint/PrintEngine/WordDocx.php b/src/Plugin/EntityPrint/PrintEngine/WordDocx.php
new file mode 100644
index 0000000..a5eb9f3
--- /dev/null
+++ b/src/Plugin/EntityPrint/PrintEngine/WordDocx.php
@@ -0,0 +1,106 @@
+<?php
+
+namespace Drupal\entity_print\Plugin\EntityPrint\PrintEngine;
+
+use Drupal\entity_print\EntityPrintPHPWord;
+use Drupal\entity_print\Plugin\ExportTypeInterface;
+use Drupal\entity_print\Plugin\PrintEngineBase;
+use Drupal\entity_print\PrintEngineException;
+use PhpOffice\PhpWord\Shared\Html;
+
+/**
+ * @PrintEngine(
+ *   id = "word_docx",
+ *   label = @Translation("Word Docx"),
+ *   export_type = "word_docx"
+ * )
+ *
+ * To use this implementation you will need the PHPWord library, simply run:
+ *
+ * @code
+ *     composer require "phpoffice/phpword v0.12.*"
+ * @endcode
+ */
+class WordDocx extends PrintEngineBase
+{
+
+  /**
+   * @var \PhpOffice\PhpWord\PhpWord
+   */
+  protected $print;
+
+  /**
+   * @var \PhpOffice\PhpWord\Element\Section;
+   */
+  protected $section;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, ExportTypeInterface $export_type)
+  {
+    parent::__construct($configuration, $plugin_id, $plugin_definition, $export_type);
+    $this->print = new EntityPrintPHPWord();
+    $this->section = $this->print->addSection();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function getInstallationInstructions()
+  {
+    return t('Please install with: @command', ['@command' => 'composer require "phpoffice/phpword v0.12.*"']);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function addPage($content)
+  {
+    // @TODO, this only supports adding one page?
+    // PHPWord library is exporting only
+    preg_match('/<body>(.*?)<\/body>/s', $content, $matches);
+    Html::addHtml($this->section, $matches[1], FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function send($filename, $force_download = TRUE)
+  {
+    try {
+      $this->print->save($filename ?: 'tmp-file', 'Word2007', (bool)$filename);
+    } catch (\Exception $e) {
+      throw new PrintEngineException($e->getMessage());
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function dependenciesAvailable()
+  {
+    return class_exists('PhpOffice\PhpWord\PhpWord') && !drupal_valid_test_ua();
+  }
+
+  /**
+   *
+   * {@inheritdoc}
+   */
+  public function getPrintObject(){
+    $this->print;
+  }
+
+  /**
+   * {@inheritdoc}
+   * @throws
+   */
+  public function getBlob() {
+    try {
+      return $this->print->getBlob();
+    } catch (\Exception $e) {
+      throw new PrintEngineException($e->getMessage());
+    }
+  }
+
+}
diff --git a/tests/src/Kernel/EntityPrintPluginManagerTest.php b/tests/src/Kernel/EntityPrintPluginManagerTest.php
index 9dda0cb..fd4f204 100644
--- a/tests/src/Kernel/EntityPrintPluginManagerTest.php
+++ b/tests/src/Kernel/EntityPrintPluginManagerTest.php
@@ -87,7 +87,7 @@ class EntityPrintPluginManagerTest extends KernelTestBase {
         'pdf',
         ['dompdf', 'phpwkhtmltopdf', 'tcpdfv1', 'not_available_print_engine'],
       ],
-      'Filter by another type' => ['word_docx', []],
+      'Filter by another type' => ['word_docx', ['word_docx']],
     ];
   }
 
